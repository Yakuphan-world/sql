<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="/Users/yakup/Downloads/chinook (2).db" readonly="0" foreign_keys="" case_sensitive_like="" temp_store="" wal_autocheckpoint="" synchronous=""/><attached/><window><main_tabs open="query pragmas structure browser" current="0"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="3862"/><column_width id="4" width="0"/></tab_structure><tab_browse><current_table name="0,0:"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="albums" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="61"/><column index="2" value="300"/><column index="3" value="59"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="artists" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="59"/><column index="2" value="300"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="genres" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="59"/><column index="2" value="112"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="media_types" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="90"/><column index="2" value="164"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="playlists" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="67"/><column index="2" value="155"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="tracks" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort><column index="5" mode="0"/></sort><column_widths><column index="1" value="56"/><column index="2" value="300"/><column index="3" value="61"/><column index="4" value="90"/><column index="5" value="59"/><column index="6" value="300"/><column index="7" value="84"/><column index="8" value="63"/><column index="9" value="65"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 1">
/*1- WRITE A QUERY THAT RETURNS TRACK NAME AND ITS COMPOSER FROM 
TRACKS TABLE*/
SELECT  name , Composer FROM tracks ;

/*2- WRITE A QUERY THAT RETURNS ALL COLUMNS FROM TRACKS TABLE*/
SELECT*FROM tracks;

/*3- WRITE A QUERY THAT RETURNS THE NAME OF COMPOSERS OF EACH 
TRACK*/
SELECT TrackId, Composer FROM tracks;
/*4- WRITE A QUERY THAT RETURNS UNIQUE ALBUMID, MEDIATYPEID FROM 
TRACKS TABLE*/
SELECT  DISTINCT AlbumId , MediaTypeId FROM tracks;
/*5- WRITE A QUERY THAT RETURNS TRACK NAME AND TRACKID OF ‘Jorge 
Ben’*/
SELECT  Name , TrackId FROM tracks where composer= &quot;Jorge Ben&quot;;

⦁/*6- WRITE A QUERY THAT RETURNS ALL INFO OF THE INVOICES OF WHICH 
TOTAL AMOUNT IS GREATER THAN $25*/
SELECT  *FROM invoices  where total &gt; 25 ;

/*7- WRITE A QUERY THAT RETURNS ALL INFO OF THE INVOICES OF WHICH 
TOTAL AMOUNT IS LESS THAN $15. JUST RETURN 5 ROWS*/
SELECT*FROM invoices where total &lt; 15 LIMIT 5 ;
/*8- WRITE A QUERY THAT RETURNS ALL INFO OF THE INVOICES OF WHICH 
TOTAL AMOUNT IS GREATER THAN $10. THEN SORT THE TOTAL AMOUNTS 
IN DESCENDING ORDER, LASTLY DISPLAY TOP 2 ROWS*/
SELECT*FROM invoices where total &gt; 10 ORDER BY total DESC;

/*9- WRITE A QUERY THAT RETURNS ALL INFO OF THE INVOICES OF WHICH 
BILLING COUNTRY IS NOT CANADA. THEN SORT THE TOTAL AMOUNTS IN 
ASCENDING ORDER, LASTLY DISPLAY TOP 10 ROWS*/

/*10- WRITE A QUERY THAT RETURNS INVOICEID, CUSTOMERID AND TOTAL 
DOLLAR AMOUNT FOR EACH INVOICE. THEN SORT THEM FIRST BY 
CUSTOMERID IN ASCENDING, THEN TOTAL DOLLAR AMOUNT IN 
DESCENDING ORDER.*/

/*11- WRITE A QUERY THAT RETURNS ALL TRACK NAMES THAT START WITH ‘B’ 
AND END WITH ‘S’*/

/*12- WRITE A QUERY THAT RETURNS THE NEWEST DATE AMONG THE INVOICE 
DATES BETWEEN 2008 AND 2011*/

/*13- WRITE A QUERY THAT RETURNS THE FIRST AND LAST NAME OF THE 
CUSTOMERS WHO HAVE ORDERS FROM NORWAY AND BELGIUM*/

/*14- WRITE A QUERY THAT RETURNS THE TRACK NAMES OF ‘ZAPPA’*/


/*15 HOW MANY TRACKS AND INVOICES ARE THERE IN THE DIGITAL MUSIC 
STORE, DISPLAY SEPERATELY*/

/*16- HOW MANY COMPOSERS ARE THERE IN THE DIGITAL MUSIC STORE*/

/*17- HOW MANY TRACKS DOES EACH ALBUM HAVE, DISPLAY ALBUMID AND 
NUMBER OF TRACKS SORTED FROM HIGHEST TO LOWEST*/

/*18- WRITE A QUERY THAT RETURNS TRACK NAME HAVING THE MINIMUM AND 
MAXIMUM DURATION, DISPLAY SEPERATELY*/

/*19- WRITE A QUERY THAT RETURNS THE TRACKS HAVING DURATION LESS 
THAN THE AVERAGE DURATION*/

/*20- WRITE A QUERY THAT RETURNS THE TOTAL NUMBER OF EACH 
COMPOSER’s TRACK.*/

/*21- WRITE A QUERY THAT RETURNS THE GENRE OF EACH TRACK.*/

/*22- WRITE A QUERY THAT RETURNS THE ARTIST’s ALBUM INFO.*/

/*23- WRITE A QUERY THAT RETURNS THE MINIMUM DURATION OF THE TRACK 
IN EACH ALBUM. DISPLAY ALBUMID, ALBUM TITLE AND DURATION OF THE 
TRACK. THEN SORT THEM FROM HIGHEST TO LOWEST*/

/*24- WRITE A QUERY THAT RETURNS ALBUMS WHOSE TOTAL DURATION IS 
HIGHER THAN 60 MIN. DISPLAY ALBUM TITLE AND THEIR DURATIONS. THEN 
SORT THE RESULT FROM HIGHEST TO LOWEST*/

/*25- WRITE A QUERY THAT RETURNS TRACKID, TRACK NAME AND ALBUMID 
INFO OF THE ALBUM WHOSE TITLE ARE ‘Prenda Minha’, 'Heart of the Night' 
AND 'Out Of Exile'.*/
&lt;/sql&gt;&lt;current_tab id=&quot;0&quot;/&gt;&lt;/tab_sql&gt;&lt;/sqlb_project&gt;
</sql><sql name="SQL 2">SELECT*FROM invoices where total &gt; 10 ORDER BY total DESC;</sql><sql name="SQL 1">/*bir tablodan bir alan getirmek*/
SELECT Title FROM albums;
/* emploxe tablosoundan ad ve soyad alanlarini getir*/
SELECT LastName, FirstName FROM employees;
/*employes tablosundaki tüm elemanlari getir*/
SELECT * FROM employees;
/*tracks tablosundan name ve Composer verilerini cek*/
SELECT name,Composer 
FROM tracks;
/*albums tablosundaki tüm verileri getir*/
SELECT *
FROM albums;
/**/
SELECT DISTINCT name,Composer
FROM tracks;

SELECT DISTINCT City FROM customers;
SELECT DISTINCT AlbumId,MediaTypeId from tracks;

SELECT *
FROM  tracks WHERE Composer = &quot;Jimi Hendrix&quot; LIMIT 3;

SELECT *
FROM invoices
WHERE total&gt;10
ORDER BY total DESC;

SELECT *
FROM invoices
WHERE NOT BillingCountry= &quot;USA&quot;
ORDER BY total DESC;

SELECT FirstName,LastName,Country
FROM customers
WHERE Country 
in (&quot;Belgium&quot;, &quot;Norway&quot;, &quot;Canada&quot;, &quot;USA&quot;);

SELECT FirstName,LastName,Country
FROM customers
WHERE Country =&quot;Belgium&quot; or Country = &quot;Norway&quot; or Country = &quot;Canada&quot; or Country = &quot;USA&quot;;

 
SELECT name
FROM Tracks
WHERE Composer like &quot;%D%&quot;;

SELECT count (name) as &quot;sayi&quot;
FROM tracks;

SELECT COUNT (Composer) as say_bakalim /*NULL degerler dahil degil*/
FROM tracks;

SELECT count (State) as &quot;BOS yapmaaaa&quot;
FROM customers;

SELECT count (*) as &quot;BOS yapmaaaa&quot;
FROM customers;

SELECT count ()&quot;Toplam&quot;,count (state) as &quot;BOS yapmaaaa&quot;
FROM customers;

SELECT count (*) as &quot;BOS yapmaaaa&quot;
FROM invoices;

SELECT count (DISTINCT Composer) as &quot;BOS yapmadann&quot;
FROM tracks;

SELECT name, max(Milliseconds) as &quot;BOS yapmadann&quot;
FROM tracks;

SELECT name, avg(Milliseconds) as &quot;Parca ortalama uzunlu&quot;
FROM tracks;

SELECT name, avg(Milliseconds)
FROM tracks;

SELECT *
FROM tracks
WHERE Milliseconds &gt;(SELECT avg(Milliseconds)FROM tracks)
LIMIT 5;

SELECT Composer, count(name) as parca_sayisi
FROM tracks
GROUP BY Composer;





</sql><sql name="SQL 3">/*bir tablodan bir alanı getirmek*/
SELECT Title FROM albums;
/*employee tablosundan adve syoad alanlarını getir */
SELECT LastName,FirstName FROM employees;
/*employees tablosundaki tüm verileri getir*/
SELECT * from employees;
/*tracks tablosundan name ve composer alanlarını getir*/
SELECT name,Composer 
FROM tracks;
/*tracks tablosundan name ve composer alanlarını tekrar etmeyecek şekilde getir*/
SELECT  DISTINCT Composer 
FROM tracks;
SELECT  DISTINCT Country,City 
FROM customers;
SELECT DISTINCT AlbumId,MediaTypeId FROM tracks;
/*tracks albumunde composer ı jimi hendrix olanları getir*/
SELECT * from tracks WHERE Composer ='Jimi Hendrix' limit 3;
/*toplam tutarı 10 $ dan fazla olan faturalardan 4 tanesini getir*/
SELECT * 
FROM invoices 
WHERE total&gt;10;
/*toplam tutarı 10$dan fazla olan faturların bilgilerini getir. Toplam miktara göre azalan sırada getir*/
SELECT * FROM invoices WHERE total&gt;10 ORDER by total DESC;
/*Ülkesi ABD olmayan faturaların bilgilerini getir. total e göre artan düzende sırala*/
SELECT * FROM invoices WHERE NOT BillingCountry='USA' ORDER by total;
/*fatura tarihi 2009 ile 2011 arasında olaları getir  */
SELECT * FROM invoices WHERE InvoiceDate BETWEEN '2009-01-01' AND '2011-12-31 00:00:00' ORDER by InvoiceDate DESC; 
/*aynı soru between yerine and ile*/
SELECT * FROM invoices WHERE InvoiceDate&gt;='2009-01-01' AND InvoiceDate&lt;='2011-12-31'; 
/*Belçika, Norveç, Kanada ve ABD'den sipariş veren müşterilerin adını ve soyadını getirin*/
SELECT Country,FirstName,LastName 
FROM customers
WHERE Country IN ('Belgium','Norway','Canada','USA') ORDER by Country; 
SELECT Country,FirstName,LastName 
FROM customers
WHERE Country ='Belgium' or Country ='Norway'or Country ='Canada' or Country ='USA' ORDER by Country;

/*aggrigation functions*/
/* tracks tablosunda kaç kayıt var */
SELECT count(*) from tracks;
/*null değerler dahil*/
SELECT count(Composer) as toplam_besteci_sayisi from tracks; 
/*null değerler dahil DEGİL*/
SELECT count(State) from customers where state NOTNULL;
SELECT count(Company) from customers;
SELECT count(*) as toplam_sayi,count(state) as toplam_state_sayisi from customers;
 
/**/
SELECT COUNT(*) FROM invoices;
/*mağazada kaç farklı besteci var*/
SELECT count(DISTINCT Composer) from tracks;
/*maksimum süreye sahip parça*/
SELECT max(Milliseconds)as en_uzun_parca from tracks;
/*maksimum süreye sahip parça*/
SELECT avg(Milliseconds) as parcaların_ort_suresi from tracks;
/*faturaların toplam tutarı*/
SELECT sum(total) as toplam_miktar, avg(total) as ortalama_fatura, min(total) as en_dusuk, max(total) as en_yuksek 
from invoices;

SELECT avg(Milliseconds) as parcaların_ort_suresi from tracks;
select * from tracks WHERE Milliseconds&gt;393599.212103911;
/*asıl yol*/
SELECT count(*) from tracks 
WHERE Milliseconds&gt;(SELECT avg(Milliseconds) as parcaların_ort_suresi from tracks);
/*her bestecinin toplam parca sayısı. name ve composer sütünlarını getir*/
SELECT Composer,count(*) as par_sayisi from tracks GROUP by Composer order by par_sayisi DESC; </sql><sql name="U_171022">/*Herbir parcanin adini getir*/

SELECT invoices.InvoiceId, invoices.CustomerId, customers.CustomerId, customers.FirstName

FROM invoices

INNER JOIN customers ON invoices.CustomerId = customers.CustomerId;



/*Find the artists album info*/

SELECT artists.Name, albums.Title

FROM artists

LEFT JOIN albums ON artists.ArtistId = albums.ArtistId;







/* heyyyy*/

SELECT TrackId, name, AlbumId

FROM tracks

WHERE AlbumId =(SELECT AlbumId FROM albums WHERE Title=&quot;Faceless&quot;);



/*eski method*/

SELECT tracks.TrackId, tracks.Name, tracks.AlbumId

FROM tracks

JOIN albums ON albums.AlbumId = tracks.AlbumId

WHERE albums.Title = &quot;Faceless&quot;;





SELECT tracks.TrackId, tracks.Name, tracks.AlbumId

FROM tracks

JOIN albums on albums.AlbumId = tracks.AlbumId

WHERE albums.Title in (&quot;Faceless&quot; , &quot;Let There Be Rock&quot;);

 

 

SELECT TrackId, name, AlbumId

FROM tracks

WHERE AlbumId in (SELECT AlbumId FROM albums WHERE Title in (&quot;Faceless&quot;, &quot;Let There Be Rock&quot;));





SELECT tracks.TrackId, tracks.Name, tracks.AlbumId

FROM tracks

JOIN albums on albums.AlbumId = tracks.AlbumId

WHERE albums.Title in (&quot;Faceless&quot; , &quot;Let There Be Rock&quot;);





SELECT tracks.TrackId, tracks.Name, tracks.AlbumId

FROM tracks

JOIN albums on albums.AlbumId = tracks.AlbumId

WHERE albums.Title in (&quot;Faceless&quot; , &quot;Let There Be Rock&quot;);



/* farkli yerlerden*/



SELECT tracks.Name as adad, albums.Title as asdads, genres.Name as asdasd, media_types.Name as cece

From tracks

JOIN albums on tracks.AlbumId=albums.AlbumId

JOIN genres on tracks.GenreId=genres.GenreId

JOIN media_types on tracks.MediaTypeId=media_types.MediaTypeId;



SELECT tracks.name as parcaIsmi,albums.Title as albumIsmi,genres.name as turIsmi, media_types.Name as medyaTipi

from tracks join albums on tracks.AlbumId=albums.AlbumId

join genres on tracks.GenreId=genres.GenreId 

join media_types on tracks.MediaTypeId=media_types.MediaTypeId;



/*yeni deneme*/
SELECT *
FROM tracks
WHERE tracks.TrackId in
		(SELECT playlist_track.TrackId 
		FROM playlist_track
		WHERE playlist_track.PlaylistId=
			(SELECT playlists.PlaylistId 
			FROM playlists 
			WHERE playlists.Name =&quot;Grunge&quot;
			)
		)
;






















</sql><current_tab id="0"/></tab_sql></sqlb_project>
