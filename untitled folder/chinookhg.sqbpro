<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="/Users/yakup/Desktop/Sql/chinook.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="3268"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="4,6:mainalbums"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="albums" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="53"/><column index="2" value="300"/><column index="3" value="53"/></column_widths><filter_values><column index="2" value="fa"/></filter_values><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="artists" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="53"/><column index="2" value="300"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="customers" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="69"/><column index="2" value="66"/><column index="4" value="300"/><column index="5" value="300"/><column index="6" value="150"/><column index="7" value="48"/><column index="8" value="104"/><column index="9" value="144"/><column index="10" value="256"/><column index="11" value="232"/><column index="12" value="186"/><column index="13" value="80"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="employees" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="69"/><column index="2" value="59"/><column index="3" value="61"/><column index="4" value="110"/><column index="5" value="63"/><column index="6" value="120"/><column index="7" value="121"/><column index="8" value="157"/><column index="9" value="64"/><column index="10" value="36"/><column index="11" value="50"/><column index="12" value="68"/><column index="13" value="107"/><column index="14" value="107"/><column index="15" value="146"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="invoices" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="140"/><column index="2" value="69"/><column index="3" value="121"/><column index="4" value="226"/><column index="5" value="119"/><column index="6" value="68"/><column index="7" value="89"/><column index="9" value="42"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="tracks" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort><column index="1" mode="0"/></sort><column_widths><column index="1" value="48"/><column index="2" value="300"/><column index="3" value="51"/><column index="4" value="75"/><column index="5" value="151"/><column index="6" value="300"/><column index="7" value="73"/><column index="8" value="63"/><column index="9" value="57"/></column_widths><filter_values><column index="1" value="88"/></filter_values><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 1">/*bir tablodan bir alanı getirmek*/
SELECT Title FROM albums;
/*employee tablosundan adve syoad alanlarını getir */
SELECT LastName,FirstName FROM employees;
/*employees tablosundaki tüm verileri getir*/
SELECT * from employees;
/*tracks tablosundan name ve composer alanlarını getir*/
SELECT name,Composer 
FROM tracks;
/*tracks tablosundan name ve composer alanlarını tekrar etmeyecek şekilde getir*/
SELECT  DISTINCT Composer 
FROM tracks;
SELECT  DISTINCT Country,City 
FROM customers;
SELECT DISTINCT AlbumId,MediaTypeId FROM tracks;
/*tracks albumunde composer ı jimi hendrix olanları getir*/
SELECT * from tracks WHERE Composer ='Jimi Hendrix' limit 3;
/*toplam tutarı 10 $ dan fazla olan faturalardan 4 tanesini getir*/
SELECT * 
FROM invoices 
WHERE total&gt;10;
/*toplam tutarı 10$dan fazla olan faturların bilgilerini getir. Toplam miktara göre azalan sırada getir*/
SELECT * FROM invoices WHERE total&gt;10 ORDER by total DESC;
/*Ülkesi ABD olmayan faturaların bilgilerini getir. total e göre artan düzende sırala*/
SELECT * FROM invoices WHERE NOT BillingCountry='USA' ORDER by total;
/*fatura tarihi 2009 ile 2011 arasında olaları getir  */
SELECT * FROM invoices WHERE InvoiceDate BETWEEN '2009-01-01' AND '2011-12-31 00:00:00' ORDER by InvoiceDate DESC; 
/*aynı soru between yerine and ile*/
SELECT * FROM invoices WHERE InvoiceDate&gt;='2009-01-01' AND InvoiceDate&lt;='2011-12-31'; 
/*Belçika, Norveç, Kanada ve ABD'den sipariş veren müşterilerin adını ve soyadını getirin*/
SELECT Country,FirstName,LastName 
FROM customers
WHERE Country IN ('Belgium','Norway','Canada','USA') ORDER by Country; 
SELECT Country,FirstName,LastName 
FROM customers
WHERE Country ='Belgium' or Country ='Norway'or Country ='Canada' or Country ='USA' ORDER by Country;



/*aggrigation functions*/
/* tracks tablosunda kaç kayıt var */
SELECT count(*) from tracks;
/*null değerler dahil*/
SELECT count(Composer) as toplam_besteci_sayisi from tracks; 
/*null değerler dahil DEGİL*/
SELECT count(State) from customers where state NOTNULL;
SELECT count(Company) from customers;
SELECT count(*) as toplam_sayi,count(state) as toplam_state_sayisi from customers;
 
/**/
SELECT COUNT(*) FROM invoices;
/*mağazada kaç farklı besteci var*/
SELECT count(DISTINCT Composer) from tracks;
/*maksimum süreye sahip parça*/
SELECT max(Milliseconds)as en_uzun_parca from tracks;
/*maksimum süreye sahip parça*/
SELECT avg(Milliseconds) as parcaların_ort_suresi from tracks;
/*faturaların toplam tutarı*/
SELECT sum(total) as toplam_miktar, avg(total) as ortalama_fatura, min(total) as en_dusuk, max(total) as en_yuksek 
from invoices;

SELECT avg(Milliseconds) as parcaların_ort_suresi from tracks;
select * from tracks WHERE Milliseconds&gt;393599.212103911;
/*asıl yol*/
SELECT count(*) from tracks 
WHERE Milliseconds&gt;(SELECT avg(Milliseconds) as parcaların_ort_suresi from tracks);
/*her bestecinin toplam parca sayısı. name ve composer sütünlarını getir*/


SELECT Composer,count(*) as par_sayisi from tracks GROUP by Composer order by par_sayisi DESC; 
SELECT*FROM invoices WHERE NOT BillingCountry=&quot;USA&quot;  ORDER by total ASC ;
SELECT sum(total) FROM invoices GROUP by BillingCountry ;

SELECT BillingCountry,sum(total) from invoices GROUP by BillingCountry;
/*her bir parçanın türü*/
SELECT tracks.Name,genres.Name from tracks INNER JOIN genres on tracks.GenreId=genres.GenreId;
/*her faturanın müşteri adını*/
SELECT invoices.InvoiceId, invoices.CustomerId, customers.CustomerId,customers.FirstName 
FROM invoices INNER JOIN customers ON invoices.CustomerId=customers.CustomerId order by InvoiceId;
/*artislerin album bilgileri INNER*/
select artists.Name,albums.Title from artists INNER JOIN albums on artists.ArtistId=albums.ArtistId;
/*artislerin album bilgileri LEFT*/
select artists.Name,albums.Title from artists Left JOIN albums on artists.ArtistId=albums.ArtistId where artists.ArtistId=1;

/*albüm title 'faceless' olan albumun parça id ve name ini getirsin*/
SELECT TrackId,name,AlbumId from tracks 
WHERE AlbumId=(select AlbumId from albums where Title='Faceless') or 
AlbumId=(select AlbumId from albums where Title='Facelift') ;
/* join kullanarak*/
SELECT tracks.TrackId,tracks.name,tracks.AlbumId 
from tracks join albums on tracks.AlbumId=albums.AlbumId 
WHERE albums.Title='Faceless';
/*albüm title 'faceless' ve 'there be rock' olan albumun parça id ve name ini getirsin*/
SELECT tracks.TrackId,tracks.name,tracks.AlbumId 
from tracks join albums on tracks.AlbumId=albums.AlbumId 
WHERE albums.Title IN('Faceless','Let There Be Rock');
/*sub QUERY ile*/
SELECT tracks.TrackId,tracks.name,tracks.AlbumId 
FROM tracks
where AlbumId IN(SELECT AlbumId from albums WHERE Title IN('Faceless','Let There Be Rock'));
/**/
SELECT tracks.name as parcaIsmi,albums.Title as albumIsmi,genres.name as turIsmi, media_types.Name as medyaTipi
from tracks join albums on tracks.AlbumId=albums.AlbumId
join genres on tracks.GenreId=genres.GenreId 
join media_types on tracks.MediaTypeId=media_types.MediaTypeId;
/**/
SELECT * from tracks where tracks.TrackId IN /*elde edilen id lerin isimleri getiriliyor*/
/*grungge play listin id sine sahip tracklrain id si elde ediliyor */
(select playlist_track.TrackId from playlist_track where playlist_track.PlaylistId=
/*grunge ismine sahip playlistin id sini buluyor */
(select playlists.PlaylistId from playlists where playlists.Name='Grunge')); 
/*join */
Select * from tracks join playlist_track on tracks.TrackId=playlist_track.TrackId 
where PlaylistId=(select playlists.PlaylistId from playlists where playlists.Name='Grunge');

select * from playlists join playlist_track on playlists.PlaylistId=playlist_track.PlaylistId
where playlists.Name='Grunge';













</sql><sql name="SQL 2">/*bir tablodan bir alanı getirmek*/
SELECT Composer FROM tracks ;
SELECT FirstName, LastName FROM employees;
SELECT*FROM employees;
SELECT name, Composer FROM tracks ;

SELECT  DISTINCT name , Composer FROM tracks;

SELECT DISTINCT  BillingCity FROM invoices;
SELECT * FROM tracks WHERE Composer = &quot;Jerry Cantrell&quot; ;

SELECT*FROM employees WHERE City=&quot;Lethbridge&quot;;
SELECT*FROM employees WHERE Title=&quot;IT Staff&quot;;
SELECT*FROM invoices WHERE total &gt;10;
SELECT*FROM invoices WHERE NOT BillingCountry=&quot;USA&quot; ORDER by total ;
SELECT*FROM invoices WHERE total&gt; 10;
SELECT*FROM invoices WHERE total &gt; 10 LIMIT 4 ;
SELECT*FROM invoices WHERE total&gt; 10 ;
SELECT*FROM invoices WHERE NOT BillingCountry=&quot;USA&quot;  ORDER by total ;
SELECT*FROM invoices  WHERE  InvoiceDate BETWEEN &quot;2009-01-01&quot; AND &quot;2011.01.01&quot;;
SELECT count(DISTINCT Composer) as       besteci_sayisi FROM tracks;
SELECT name,  max(Milliseconds)/600 as en_fazla_süreye_sahip_parca  FROM tracks;

SELECT name, min(Milliseconds) as en_kisa_süreye_sahip_parca FROM tracks ;
SELECT sum(total) as toplam_harcanan_para  , avg(total ) as harcanin_paranin_ortalamasi     FROM invoices;

SELECT count(*)   FROM tracks  WHERE   Milliseconds &gt; (SELECT avg(Milliseconds)    FROM tracks  );


SELECT albums.AlbumId ,tracks.TrackId, tracks.Name  FROM tracks INNER JOIN albums ON tracks.AlbumId=albums.AlbumId WHERE albums.Title=&quot;Faceless&quot; ;
                                  </sql><sql name="SQL 6">SELECT BillingCountry,sum(total) FROM invoices GROUP by BillingCountry ;
SELECT tracks.name , genres.Name FROM tracks INNER JOIN genres on tracks.GenreId=genres.GenreId;

SELECT   invoices.InvoiceId, invoices.CustomerId ,customers.FirstName, customers.CustomerId     
FROM invoices INNER JOIN customers on invoices.CustomerId=customers.CustomerId ;

SELECT artists.Name, albums.Title     FROM artists INNER JOIN albums ON artists.ArtistId=albums.ArtistId ;





SELECT artists.Name, albums.Title     FROM albums LEFT JOIN artists ON artists.ArtistId=albums.ArtistId ;

SELECT TrackId,name, AlbumId FROM tracks WHERE AlbumId= (SELECT  AlbumId FROM albums WHERE  Title=&quot;Faceless&quot; );


SELECT TrackId,name,AlbumId FROM tracks INNER JOIN albums ON tracks.AlbumId=albums.AlbumId ;

SELECT tracks.TrackId , tracks.Name ,tracks.AlbumId FROM tracks WHERE AlbumId IN ( SELECT AlbumId FROM albums where Title IN (&quot;Faceless&quot; , &quot;Let There Be Rock&quot;));
SELECT * from tracks where tracks.TrackId IN
(select playlist_track.TrackId from playlist_track where playlist_track.PlaylistId=
(select playlists.PlaylistId from playlists where playlists.Name='Grunge'));
                                  




</sql><current_tab id="0"/></tab_sql></sqlb_project>
